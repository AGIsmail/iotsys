diff -r a03479fca9f0 iotsys-common/src/at/ac/tuwien/auto/iotsys/commons/ObjectBroker.java
--- a/iotsys-common/src/at/ac/tuwien/auto/iotsys/commons/ObjectBroker.java	Mon Apr 22 15:08:30 2013 +0200
+++ b/iotsys-common/src/at/ac/tuwien/auto/iotsys/commons/ObjectBroker.java	Sun Apr 28 17:44:34 2013 +0900
@@ -29,6 +29,8 @@
 	public abstract Obj invokeOp(Uri uri, Obj input, boolean b);
 
 	public abstract void addOperationHandler(Uri uri, OperationHandler handler);
+	
+	public abstract void removeOperationHandler(Uri uri);
 
 	public abstract String getCoRELinks();
 	
diff -r a03479fca9f0 iotsys-gateway/src/at/ac/tuwien/auto/iotsys/gateway/obix/objectbroker/ObjectBrokerImpl.java
--- a/iotsys-gateway/src/at/ac/tuwien/auto/iotsys/gateway/obix/objectbroker/ObjectBrokerImpl.java	Mon Apr 22 15:08:30 2013 +0200
+++ b/iotsys-gateway/src/at/ac/tuwien/auto/iotsys/gateway/obix/objectbroker/ObjectBrokerImpl.java	Sun Apr 28 17:44:34 2013 +0900
@@ -246,6 +246,7 @@
 			for (int i = 0; i < o.size(); i++)
 				if (kids[i].getHref() != null)
 					hrefs.addAll(addObj(kids[i]));
+			// FIXME: should we store kid's href as absolute rather than relative href?
 		}
 
 		return hrefs;
@@ -281,6 +282,11 @@
 			OperationHandler handler) {
 		operationHandler.put(uri.toString(), handler);
 	}
+	
+	@Override
+	public void removeOperationHandler(Uri uri){
+		operationHandler.remove(uri.getPath());
+	}
 
 	@Override
 	public synchronized String getCoRELinks() {
diff -r a03479fca9f0 iotsys-gateway/src/at/ac/tuwien/auto/iotsys/gateway/obix/objects/NillImpl.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/iotsys-gateway/src/at/ac/tuwien/auto/iotsys/gateway/obix/objects/NillImpl.java	Sun Apr 28 17:44:34 2013 +0900
@@ -0,0 +1,13 @@
+package at.ac.tuwien.auto.iotsys.gateway.obix.objects;
+
+import obix.Contract;
+import obix.Obj;
+import obix.contracts.Nil;
+
+public class NillImpl extends Obj implements Nil {
+
+	public NillImpl() {
+		setIs(new Contract(WatchImpl.OBIX_NIL));
+	}
+
+}
diff -r a03479fca9f0 iotsys-gateway/src/at/ac/tuwien/auto/iotsys/gateway/obix/objects/WatchImpl.java
--- a/iotsys-gateway/src/at/ac/tuwien/auto/iotsys/gateway/obix/objects/WatchImpl.java	Mon Apr 22 15:08:30 2013 +0200
+++ b/iotsys-gateway/src/at/ac/tuwien/auto/iotsys/gateway/obix/objects/WatchImpl.java	Sun Apr 28 17:44:34 2013 +0900
@@ -87,6 +87,10 @@
 						Obj o = broker.pullObj(uri);
 						o.attach(observer);
 						ret.values().add(o);
+						// FIXME: duplicate child name exception! obj name cannot be duplicate?
+						// + add() method should use href as key to check duplication rather than name.
+						// + illogical procedure! object o is pulled from objects list
+						// using href as a key but is added to values() using name as a key
 
 					}					
 				}		
@@ -98,9 +102,20 @@
 		broker.addOperationHandler(new Uri(this.getNormalizedHref().getPath() + "/remove"), new OperationHandler(){
 			@Override
 			public Obj invoke(Obj in) {
-				// Perform add logic
-				
-				return new WatchOutImpl();
+				// Perform remove logic
+				if(in instanceof WatchIn){
+					WatchIn watchIn = (WatchIn) in;
+	
+					for(Obj u : watchIn.get("hrefs").list()){
+						Uri uri = (Uri) u;
+
+						ObjObserver observer = observers.get(uri.getPath());
+						observers.remove(uri.getPath());
+						Obj o = broker.pullObj(uri);
+						o.detach(observer);
+					}					
+				}		
+				return new NillImpl();
 			}			
 		});
 		
@@ -123,8 +138,49 @@
 				return out;
 			}		
 		});
+		broker.addOperationHandler(new Uri(this.getNormalizedHref().getPath() + "/pollRefresh"), new OperationHandler(){
+			@Override
+			public Obj invoke(Obj in) {
+				WatchOutImpl out = new WatchOutImpl();
+				// Perform refresh logic	
+				// Get a list of being-observed URI; get the corresponding object; notify the observer --> performing an update
+				synchronized(observers){
+					for (ObjObserver observer : observers.values()){
+						Obj beingObservedObject = (Obj) observer.getSubject();
+						beingObservedObject.notifyObservers();
+						out.values().add(beingObservedObject);
+						observer.getEvents();
+					}
+				}
+				return out;
+			}		
+		});
+		broker.addOperationHandler(new Uri(this.getNormalizedHref().getPath() + "/delete"), new OperationHandler(){
+			@Override
+			public Obj invoke(Obj in) {
+				// Perform delete logic
+				for (ObjObserver observer : observers.values()){
+					Obj beingObservedObject = (Obj) observer.getSubject();
+					beingObservedObject.detach(observer);
+					observers.remove(observer);
+					observer = null;
+				}
+				numInstance = 0;
+				broker.removeOperationHandler(new Uri(thisWatch().getNormalizedHref().getPath() + "/add"));
+				broker.removeOperationHandler(new Uri(thisWatch().getNormalizedHref().getPath() + "/remove"));
+				broker.removeOperationHandler(new Uri(thisWatch().getNormalizedHref().getPath() + "/pollChanges"));
+				broker.removeOperationHandler(new Uri(thisWatch().getNormalizedHref().getPath() + "/pollRefresh"));
+				broker.removeOperationHandler(new Uri(thisWatch().getNormalizedHref().getPath() + "/delete"));
+				broker.removeObj(thisWatch().getHref().getPath());
+				return new NillImpl();
+			}		
+		});
 	}
 	
+	public Watch thisWatch(){
+		return this;
+	}
+
 	public Reltime lease() {
 		// TODO make lease time writeable
 		return new Reltime("lease", 60 * 1000); // 1 minute by defaults, not writable
@@ -135,7 +191,7 @@
 	}
 
 	public Op remove() {
-		return new Op("remove", new Contract(WATCH_IN_CONTRACT), new Contract("obix:Nil"));
+		return new Op("remove", new Contract(WATCH_IN_CONTRACT), new Contract(OBIX_NIL));
 	}
 
 	public Op pollChanges() {
diff -r a03479fca9f0 iotsys-obix/src/at/ac/tuwien/auto/iotsys/gateway/obix/observer/ObjObserver.java
--- a/iotsys-obix/src/at/ac/tuwien/auto/iotsys/gateway/obix/observer/ObjObserver.java	Mon Apr 22 15:08:30 2013 +0200
+++ b/iotsys-obix/src/at/ac/tuwien/auto/iotsys/gateway/obix/observer/ObjObserver.java	Sun Apr 28 17:44:34 2013 +0900
@@ -6,7 +6,7 @@
 import obix.Obj;
 
 /**
- * Observers the state changes of an obix object. Holds a history 
+ * Observes the state changes of an obix object. Holds a history 
  * of the changes until the events are polled or the max number of 
  * elements is exceeded.
  * 
